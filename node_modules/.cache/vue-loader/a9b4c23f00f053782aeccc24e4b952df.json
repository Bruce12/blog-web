{"remainingRequest":"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lanjianhua/Desktop/lanjianhua/blog-web/src/components/MarkdownEditor/index.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/lanjianhua/Desktop/lanjianhua/blog-web/src/components/MarkdownEditor/index.vue","mtime":1590645396635},{"path":"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\nimport 'codemirror/lib/codemirror.css' // codemirror\nimport 'tui-editor/dist/tui-editor.css' // editor ui\nimport 'tui-editor/dist/tui-editor-contents.css' // editor content\nimport { Component, Prop, Vue, Watch } from 'vue-property-decorator'\nimport defaultOptions from './default-options'\nimport TuiEditor from 'tui-editor'\n\nconst defaultId = () => 'markdown-editor-' + +new Date() + ((Math.random() * 1000).toFixed(0) + '')\n\n@Component({\n  name: 'MarkdownEditor'\n})\nexport default class extends Vue {\n  @Prop({ required: true }) private value!: string\n  @Prop({ default: defaultId }) private id!: string\n  @Prop({ default: () => defaultOptions }) private options!: tuiEditor.IEditorOptions\n  @Prop({ default: 'markdown' }) private mode!: string\n  @Prop({ default: '300px' }) private height!: string\n  // https://github.com/nhnent/tui.editor/tree/master/src/js/langs\n  @Prop({ default: 'en_US' }) private language!: string\n\n  private markdownEditor?: tuiEditor.Editor\n\n  get editorOptions() {\n    const options = Object.assign({}, defaultOptions, this.options)\n    options.initialEditType = this.mode\n    options.height = this.height\n    options.language = this.language\n    return options\n  }\n\n  @Watch('value')\n  private onValueChange(value: string, oldValue: string) {\n    if (this.markdownEditor) {\n      if (value !== oldValue && value !== this.markdownEditor.getValue()) {\n        this.markdownEditor.setValue(value)\n      }\n    }\n  }\n\n  @Watch('language')\n  private onLanguageChange() {\n    this.destroyEditor()\n    this.initEditor()\n  }\n\n  @Watch('height')\n  private onHeightChange(value: string) {\n    if (this.markdownEditor) {\n      this.markdownEditor.height(value)\n    }\n  }\n\n  @Watch('mode')\n  private onModeChange(value: string) {\n    if (this.markdownEditor) {\n      this.markdownEditor.changeMode(value)\n    }\n  }\n\n  mounted() {\n    this.initEditor()\n  }\n\n  destroyed() {\n    this.destroyEditor()\n  }\n\n  private initEditor() {\n    const editorElement = document.getElementById(this.id)\n    if (!editorElement) return\n    this.markdownEditor = new TuiEditor({\n      el: editorElement,\n      ...this.editorOptions\n    })\n    if (this.value) {\n      this.markdownEditor.setValue(this.value)\n    }\n    this.markdownEditor.on('change', () => {\n      this.$emit('input', this.markdownEditor!.getValue())\n    })\n  }\n\n  private destroyEditor() {\n    if (!this.markdownEditor) return\n    this.markdownEditor.off('change')\n    this.markdownEditor.remove()\n    this.markdownEditor = undefined\n  }\n\n  public focus() {\n    if (this.markdownEditor) {\n      this.markdownEditor.focus()\n    }\n  }\n\n  public setValue(value: string) {\n    if (this.markdownEditor) {\n      this.markdownEditor.setValue(value)\n    }\n  }\n\n  public getValue() {\n    if (this.markdownEditor) {\n      return this.markdownEditor.getValue()\n    }\n    return ''\n  }\n\n  public setHtml(value: string) {\n    if (this.markdownEditor) {\n      this.markdownEditor.setHtml(value)\n    }\n  }\n\n  public getHtml() {\n    if (this.markdownEditor) {\n      return this.markdownEditor.getHtml()\n    }\n    return ''\n  }\n}\n",null]}