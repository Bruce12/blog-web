{"remainingRequest":"/Users/lanjianhua/Desktop/lanjianhua/myMusic/node_modules/babel-loader/lib/index.js!/Users/lanjianhua/Desktop/lanjianhua/myMusic/node_modules/ts-loader/index.js??ref--14-2!/Users/lanjianhua/Desktop/lanjianhua/myMusic/node_modules/eslint-loader/index.js??ref--13-0!/Users/lanjianhua/Desktop/lanjianhua/myMusic/src/utils/dom.ts","dependencies":[{"path":"/Users/lanjianhua/Desktop/lanjianhua/myMusic/src/utils/dom.ts","mtime":1575252792543},{"path":"/Users/lanjianhua/Desktop/lanjianhua/myMusic/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lanjianhua/Desktop/lanjianhua/myMusic/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lanjianhua/Desktop/lanjianhua/myMusic/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/lanjianhua/Desktop/lanjianhua/myMusic/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-nan\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nexport var isElement = function isElement(el) {\n  return Boolean(el && el.nodeType === Node.ELEMENT_NODE);\n}; // Add a class to an element\n\nexport var addClass = function addClass(el, className) {\n  if (className && isElement(el) && el.classList) {\n    el.classList.add(className);\n  }\n}; // Remove a class from an element\n\nexport var removeClass = function removeClass(el, className) {\n  if (className && isElement(el) && el.classList) {\n    el.classList.remove(className);\n  }\n}; //\n\nexport var hasClass = function hasClass(el, className) {\n  if (className && isElement(el) && el.classList) {\n    return el.classList.contains(className);\n  }\n\n  return false;\n}; // 设置属性值\n\nexport var setAttr = function setAttr(el, attr, value) {\n  if (attr && isElement(el)) {\n    el.setAttribute(attr, value);\n  }\n}; // 删除属性\n\nexport var removeAttr = function removeAttr(el, attr) {\n  if (attr && isElement(el)) {\n    el.removeAttribute(attr);\n  }\n}; // 获取属性值\n\nexport var getAttr = function getAttr(el, attr) {\n  if (attr && isElement(el)) {\n    return el.getAttribute(attr);\n  }\n};\nexport var find = function find(tag) {\n  return document.querySelectorAll(tag);\n}; // 绑定事件\n\nexport var eventOn = function eventOn(element, event, listener) {\n  if (element.addEventListener) {\n    element.addEventListener(event, listener, false);\n  } else if (element['attachEvent']) {\n    element['attachEvent']('on' + event, listener);\n  } else {\n    element['on' + event] = listener;\n  }\n\n  return listener;\n}; // 移除事件\n\nexport var eventOff = function eventOff(el, entName, handler) {\n  var option = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (el.removeEventListener) {\n    el.removeEventListener(entName, handler, option);\n  } else if (el['deattachEvent']) {\n    el['deattachEvent']('on' + entName, handler);\n  } else {\n    el['on' + entName] = null;\n  }\n}; // 获取元素下面所有子元素\n\nexport var findChildNodes = function findChildNodes(el) {\n  var nodes = el.childNodes;\n  var nodeArr = Array.from(nodes);\n  var temp = [];\n\n  for (var i = 0; i < nodeArr.length; i++) {\n    var nType = nodeArr[i].nodeType;\n\n    if (nType === 1) {\n      temp.push(nodeArr[i]);\n    }\n  }\n\n  return temp;\n}; // 获取元素相对位置\n\nexport var getPosition = function getPosition(el, isRelative) {\n  var x = 0;\n  var y = 0;\n  var node = el;\n\n  while (node != null && node.tagName !== 'BODY') {\n    x += node.offsetLeft;\n    y += node.offsetTop;\n    node = node.offsetParent;\n\n    if (isRelative) {\n      var sty = node.currentStyle ? node.currentStyle['position'] : getComputedStyle(node, null)['position'];\n\n      if (sty === 'relative' || sty === 'absolute') {\n        node = null;\n      }\n    }\n  }\n\n  return {\n    x: x,\n    y: y\n  };\n}; // 获取鼠标坐标\n\nexport var getMousePostion = function getMousePostion(el) {\n  var e = window.event;\n  return {\n    x: document.documentElement.scrollLeft + e.clientX,\n    y: document.documentElement.scrollTop + e.clientY\n  };\n}; // 获取某个元素父及元素 某个css属性值\n\nexport var existStyle = function existStyle(el, obj) {\n  var node = el;\n  var res = {\n    resutl: false,\n    el: null\n  };\n\n  while (node != null && node.tagName !== 'BODY') {\n    var proName = getStyle(node, obj.name);\n\n    if (proName === obj.value) {\n      res.resutl = true;\n      res.el = node;\n      node = null;\n    }\n\n    node = node && node.parentNode;\n  }\n\n  return res;\n}; // 获取dom 元素样式\n\nexport var getStyle = function getStyle(el, attr) {\n  var getCss = getComputedStyle ? getComputedStyle(el, null) : el.currentStyle;\n  return attr ? getCss[attr] : getCss;\n}; // 简单动画\n\nexport var animate = function animate(el, option, fn) {\n  // delay\n  var delay = 0;\n\n  if (option.delay !== undefined) {\n    delay = option.delay;\n    delete option.delay;\n  }\n\n  clearTimeout(el.delayTimer);\n  clearInterval(el.timer);\n  el.delayTimer = setTimeout(function () {\n    el.timer = setInterval(function () {\n      // 属性当前值\n      for (var key in option) {\n        var attr = key;\n        var target = attr === 'opacity' ? option[key] * 100 : option[key]; // 防止连续移入元素会生成多个计时器，所以进入之前先清除\n\n        var icur = 0;\n\n        if (attr === 'opacity') {\n          // 这里用Math.round()处理是防止出现数据在目标值附近抖动的情况，因为计算机对浮点数的计算存在误差\n          icur = Math.round(parseFloat(getStyle(el, attr)) * 100);\n        } else {\n          icur = parseInt(getStyle(el, attr));\n        } // 动画的速度\n\n\n        var speed = (target - icur) / 10;\n        speed = speed > 0 ? Math.ceil(speed) : Math.floor(speed); // 检测停止\n\n        if (Number.isNaN(speed)) {\n          clearInterval(el.timer);\n        }\n\n        if (icur === target) {\n          delete option[key];\n\n          if (JSON.stringify(option) === '{}') {\n            clearInterval(el.timer);\n            if (typeof fn === 'function') fn();\n          }\n        } else {\n          if (attr === 'opacity') {\n            // IE\n            el.style.filter = 'alpha(opacity:' + (icur + speed) + ')'; // 非IE\n\n            el.style.opacity = String((icur + speed) / 100);\n          } else {\n            el.style[attr] = icur + speed + 'px';\n          }\n        }\n      }\n    }, 10);\n  }, delay);\n};",null]}