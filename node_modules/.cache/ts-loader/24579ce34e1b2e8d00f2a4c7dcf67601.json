{"remainingRequest":"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/babel-loader/lib/index.js!/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/ts-loader/index.js??ref--14-2!/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/eslint-loader/index.js??ref--13-0!/Users/lanjianhua/Desktop/lanjianhua/blog-web/src/pages/admin/views/snake/snake.ts","dependencies":[{"path":"/Users/lanjianhua/Desktop/lanjianhua/blog-web/src/pages/admin/views/snake/snake.ts","mtime":1587295714000},{"path":"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _possibleConstructorReturn from \"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport _createClass from \"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/lanjianhua/Desktop/lanjianhua/blog-web/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\n\n/**\n * 抽象动物类\n */\nvar Animal = function Animal() {\n  _classCallCheck(this, Animal);\n};\n/**\n * 方向Code\n */\n\n\nvar direction;\n\n(function (direction) {\n  direction[direction[\"Up\"] = 38] = \"Up\";\n  direction[direction[\"Down\"] = 40] = \"Down\";\n  direction[direction[\"Left\"] = 37] = \"Left\";\n  direction[direction[\"Right\"] = 39] = \"Right\";\n})(direction || (direction = {}));\n/**\n * 食物类\n * 负责生产食物\n */\n\n\nvar Food =\n/*#__PURE__*/\nfunction () {\n  function Food(opt) {\n    _classCallCheck(this, Food);\n\n    this.colCount = opt.colCount;\n    this.rowCount = opt.rowCount;\n    this.color = opt.color;\n    this.size = opt.size; // 初始化食物\n\n    this.genFood(opt.points);\n  }\n\n  _createClass(Food, [{\n    key: \"genFood\",\n    value: function genFood(points) {\n      var _this = this;\n\n      var foodCol = 0;\n      var foodRow = 0;\n\n      do {\n        foodCol = Math.floor(Math.random() * this.colCount);\n        foodRow = Math.floor(Math.random() * this.rowCount);\n        this.generated = false; // 在蛇身体所有的 坐标点上 比较\n\n        points.forEach(function (item) {\n          if (item.row === foodRow && item.col === foodCol) {\n            _this.generated = true;\n          }\n        });\n      } while (this.generated); // 绘制食物在图形上\n\n\n      Food.curFood = new Point(foodRow, foodCol);\n      Food.curFood.draw(this.color, this.size);\n    }\n  }]);\n\n  return Food;\n}();\n/**\n *  场景面板类 Canvas\n */\n\n\nvar Scene =\n/*#__PURE__*/\nfunction () {\n  function Scene(id, opt) {\n    _classCallCheck(this, Scene);\n\n    this.sceneMap = document.querySelector(id);\n    this.height = opt.height;\n    this.width = opt.width;\n    this.bgColor = opt.bgColor;\n    this.init();\n  } // 设置画布\n\n\n  _createClass(Scene, [{\n    key: \"init\",\n    value: function init() {\n      this.sceneMap.height = this.height;\n      this.sceneMap.width = this.width;\n      this.sceneMap.style.background = this.bgColor;\n      Scene.graphic = this.sceneMap.getContext('2d');\n    }\n  }]);\n\n  return Scene;\n}();\n/**\n * 提供画布上画点的方法\n */\n\n\nvar Point =\n/*#__PURE__*/\nfunction () {\n  function Point(row, col) {\n    _classCallCheck(this, Point);\n\n    this.color = '';\n    this.row = row;\n    this.col = col;\n  }\n\n  _createClass(Point, [{\n    key: \"equal\",\n    value: function equal(snakeBlock) {\n      if (snakeBlock && snakeBlock.row === this.row && snakeBlock.col === this.col) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(color, size) {\n      Scene.graphic.fillStyle = color;\n      Scene.graphic.fillRect(size * this.col, size * this.row, size - 2, size - 2);\n    }\n  }, {\n    key: \"clearDraw\",\n    value: function clearDraw(color, size) {\n      Scene.graphic.fillStyle = color;\n      Scene.graphic.fillRect(size * this.col, size * this.row, size, size);\n    }\n  }]);\n\n  return Point;\n}();\n/**\n * 蛇：游戏玩家\n */\n\n\nvar Snake =\n/*#__PURE__*/\nfunction (_Animal) {\n  _inherits(Snake, _Animal);\n\n  function Snake(config) {\n    var _this2;\n\n    _classCallCheck(this, Snake);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Snake).call(this)); // 蛇大小\n\n    _this2.size = 20;\n    _this2.gameStatus = false; // 蛇身\n\n    _this2.points = [];\n    _this2.levelCount = 10;\n    _this2.snakeColor = config.color || 'red';\n    _this2.speed = config.speed || 200;\n    _this2.startY = config.y || 15;\n\n    _this2.setPoints();\n\n    return _this2;\n  }\n  /*\n   初始化蛇身\n  */\n\n\n  _createClass(Snake, [{\n    key: \"setPoints\",\n    value: function setPoints() {\n      this.points = [];\n\n      for (var i = 0; i < 5; i++) {\n        var point = new Point(this.startY, i + 1);\n        point.draw(this.snakeColor, this.size);\n        this.points.push(point);\n      }\n    }\n    /**\n     * 运动\n     */\n\n  }, {\n    key: \"move\",\n    value: function move(curDirection) {\n      var snakeBlock2 = this.points[this.points.length - 1]; // 头部\n\n      var newBlock = new Point(1, 0);\n\n      switch (curDirection) {\n        case 1:\n          newBlock = new Point(snakeBlock2.row, snakeBlock2.col + 1);\n          break;\n\n        case 2:\n          newBlock = new Point(snakeBlock2.row + 1, snakeBlock2.col);\n          break;\n\n        case 3:\n          newBlock = new Point(snakeBlock2.row, snakeBlock2.col - 1);\n          break;\n\n        case 4:\n          newBlock = new Point(snakeBlock2.row - 1, snakeBlock2.col);\n          break;\n      }\n\n      this.points.push(newBlock);\n      newBlock.draw(this.snakeColor, this.size);\n      return newBlock;\n    } // 吃食物\n\n  }, {\n    key: \"eat\",\n    value: function eat(snakeHead) {\n      if (snakeHead instanceof Point) {\n        if (snakeHead.equal(Food.curFood)) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n    /**\n     * 改变速度\n     */\n\n  }, {\n    key: \"changeSpeed\",\n    value: function changeSpeed() {// if (!(this.count % this.levelCount)) {\n      //   if (this.curSpeed > 150) {\n      //     this.curSpeed -= 50\n      //   } else if (this.curSpeed <= 150 && this.curSpeed >= 100) {\n      //     this.curSpeed -= 15\n      //   } else {\n      //     this.curSpeed -= 5\n      //   }\n      // }\n    }\n  }]);\n\n  return Snake;\n}(Animal);\n\nSnake.isMoved = false; // 游戏启动类\n\nvar Game =\n/*#__PURE__*/\nfunction () {\n  // 初始化\n  function Game(id, config) {\n    _classCallCheck(this, Game);\n\n    // 游戏状态\n    this.gameStatus = false; // 得分\n\n    this.score = 0;\n    this.y = 15;\n    this.curDirection = 1;\n    this.pauseKey = 32;\n    this.isMoved = false;\n    this.gameTimer = null;\n    this.id = id;\n    if (!config) config = {};\n    this.rowCount = config.rowCount || 30;\n    this.colCount = config.colCount || 30;\n    this.size = config.size || 20;\n    this.foodColor = config.foodColor || 'red';\n    this.snakeColor = config.snakeColor || 'yellow';\n    this.sceneBgColor = config.sceneBgColor || 'green';\n    var sceneConfig = {\n      width: this.colCount * this.size,\n      height: this.rowCount * this.size,\n      bgColor: this.sceneBgColor\n    }; // 1.建立场景\n\n    this.scene = new Scene(id, sceneConfig);\n    var snakeConfig = {\n      y: this.y,\n      speed: 200,\n      color: this.snakeColor\n    };\n    /**\n     * 初始化\n     */\n\n    if (this.scene.width !== this.size * this.rowCount || this.scene.height !== this.size * this.colCount) {\n      console.log('场景大小不等于行列大小');\n      return;\n    } // 2. 初始化蛇\n\n\n    this.snake = new Snake(snakeConfig);\n    var foodConfig = {\n      colCount: this.colCount,\n      rowCount: this.rowCount,\n      size: this.size,\n      color: this.foodColor,\n      points: this.snake.points\n    }; // 3. 初始化食物\n\n    this.food = new Food(foodConfig);\n    this.initKeyEvent();\n  }\n\n  _createClass(Game, [{\n    key: \"initKeyEvent\",\n    value: function initKeyEvent() {\n      var _this3 = this;\n\n      // 监听移动方向\n      document.onkeydown = function (e) {\n        var key = (e || event).keyCode;\n\n        _this3.handleDirection(key);\n      };\n    }\n    /**\n     * 处理键盘 [39, 40, 37, 38]\n     */\n\n  }, {\n    key: \"handleDirection\",\n    value: function handleDirection(key) {\n      var inputDirection = this.curDirection;\n\n      switch (key) {\n        case direction.Right:\n          inputDirection = 1;\n          break;\n\n        case direction.Down:\n          inputDirection = 2;\n          break;\n\n        case direction.Left:\n          inputDirection = 3;\n          break;\n\n        case direction.Up:\n          inputDirection = 4;\n          break;\n\n        case this.pauseKey:\n          // this.changeGameStatus()\n          break;\n      }\n\n      if (this.isMoved || typeof this.gameTimer !== 'number') {\n        // 只有上一次方向移动或者暂停，才能更改方向\n        if (inputDirection + 2 === this.curDirection || inputDirection - 2 === this.curDirection || inputDirection === this.curDirection) {// 不需要变动方向\n        } else {\n          this.curDirection = inputDirection;\n        }\n\n        this.isMoved = false;\n      }\n    } // 游戏是否结束\n\n  }, {\n    key: \"gameOver\",\n    value: function gameOver() {\n      var isGameOver = false; // 头部\n\n      var snakeHead = this.snake.points[this.snake.points.length - 1]; // console.log('snakeHead', snakeHead)\n\n      if (snakeHead.row < 0 || snakeHead.row >= this.rowCount || snakeHead.col < 0 || snakeHead.col >= this.colCount) {\n        isGameOver = true;\n      }\n\n      for (var i = 0; i < this.snake.points.length - 3; i++) {\n        // 头部需要和尾部的snake.lenth-4个进行判断即可\n        if (snakeHead.equal(this.snake.points[i])) {\n          isGameOver = true;\n        }\n      }\n\n      return isGameOver;\n    }\n  }, {\n    key: \"changeGameStatus\",\n    value: function changeGameStatus() {} // if (this.gameStatus) {\n    //   if (typeof this.runId === 'number') {\n    //     clearTimeout(this.runId)\n    //     this.runId = ''\n    //   } else {\n    //     this.runGame()\n    //   }\n    // }\n    // 启动游戏\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.gameStatus = true;\n      clearTimeout(this.gameTimer); // 蛇移动\n\n      this.snakeMove();\n    }\n  }, {\n    key: \"snakeMove\",\n    value: function snakeMove() {\n      var _this4 = this;\n\n      if (this.gameStatus) {\n        var newBlock = this.snake.move(this.curDirection); // 游戏是否结束\n\n        if (this.gameOver()) {\n          this.gameStatus = false;\n        } else {\n          if (this.snake.eat(newBlock)) {\n            // 是否吃到了食物\n            // 产生食物\n            this.food.genFood(this.snake.points);\n            this.score++; // this.changeSpeed()\n            // this.triggerEvent(this.onCountChange, this.count)\n          } else {\n            this.snake.points.shift().clearDraw(this.scene.bgColor, this.size);\n          }\n\n          this.isMoved = true; // 可以更改方向了\n        }\n\n        this.gameTimer = setTimeout(function () {\n          _this4.snakeMove();\n        }, this.snake.speed);\n      } else {\n        console.log('游戏结束');\n      }\n    } // 暂停游戏\n\n  }, {\n    key: \"pause\",\n    value: function pause() {}\n  }]);\n\n  return Game;\n}();\n\nexport default Game;",null]}